name: Elixir CI

on:
  push:
    branches: [ main ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: sns,sqs
          DEBUG: ""
          DATA_DIR: ""
          LAMBDA_EXECUTOR: ""
          KINESIS_ERROR_PROBABILITY: ""
          DOCKER_HOST: unix:///var/run/docker.sock
          HOST_TMP_FOLDER: "/tmp"

    steps:
    - uses: actions/checkout@v2

    - name: Determine the elixir version
      run: echo "ELIXIR_VERSION=$(grep -h elixir .tool-versions | awk '{ print $2 }' | awk -F - '{print $1}')" >> $GITHUB_ENV

    - name: Determine the otp version
      run: echo "OTP_VERSION=$(grep -h erlang .tool-versions | awk '{ print $2 }')" >> $GITHUB_ENV

    - name: Set up Elixir
      uses: actions/setup-elixir@v1
      with:
        experimental-otp: true
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Restore dependencies cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Fetch mix dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile dependencies
      run: mix deps.compile

    - name: Compile
      run: mix compile --warnings-as-errors --force

    - name: Check formatting
      run: mix format --check-formatted

    - name: Credo
      run: mix credo

    - name: Coveralls
      run: mix coveralls.github

    - name: Dialyzer
      run: mix dialyzer --halt-exit-status

    - name: Versioning
      run: |
        mix deps.get
        npm install
        npx semantic-release

    - name: Publish library
      run: mix hex.publish --yes
      env:
        MIX_ENV: dev
        HEX_API_KEY: ${{ secrets.HEX_PUBLISH_KEY }}
